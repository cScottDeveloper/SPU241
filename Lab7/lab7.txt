Script started on 2019-03-15 13:07:48-04:00 [TERM="xterm" TTY="/dev/pts/0" COLUMNS="80" LINES="24"]
]0;scottcha@eos27:~/SPU241/Lab7[scottcha@eos27 Lab7]$ echo "Start a terminal session"
Start a terminal session
]0;scottcha@eos27:~/SPU241/Lab7[scottcha@eos27 Lab7]$ echo "My home directory is " $HOME
My home directory is  /home/scottcha
]0;scottcha@eos27:~/SPU241/Lab7[scottcha@eos27 Lab7]$ ls -l
total 44
drwxr-xr-x 1 scottcha users 100 Mar 15 13:07 code
-rw-r--r-- 1 scottcha users 273 Mar 15 13:07 findfiles1.sh
-rw-r--r-- 1 scottcha users 273 Mar 15 13:07 findfiles2.sh
-rw-r--r-- 1 scottcha users 334 Mar 15 13:07 headers
-rw-r--r-- 1 scottcha users 336 Mar 15 13:07 inboth1.sh
-rw-r--r-- 1 scottcha users 269 Mar 15 13:07 inboth2.sh
-rw-r--r-- 1 scottcha users   0 Mar 15 13:07 lab7a
-rw-r--r-- 1 scottcha users  40 Mar 15 13:07 loop1
-rw-r--r-- 1 scottcha users  61 Mar 15 13:07 loop2
-rw-r--r-- 1 scottcha users  54 Mar 15 13:07 loop3
-rw-r--r-- 1 scottcha users  57 Mar 15 13:07 loop4
-rw-r--r-- 1 scottcha users  78 Mar 15 13:07 loop5
-rwxr--r-- 1 scottcha users 388 Mar 15 13:07 menu
]0;scottcha@eos27:~/SPU241/Lab7[scottcha@eos27 Lab7]$ ?[Kchmed u + x[K[K[K[K+x loop?[K1 ?[K| chmed u [K+x loop2[K3 |[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[135]
bash: chmed: command not found
]0;scottcha@eos27:~/SPU241/Lab7[scottcha@eos27 Lab7]$ chmod u+x loop[135]
]0;scottcha@eos27:~/SPU241/Lab7[scottcha@eos27 Lab7]$ chom[K[Kmod u+w *.sh
]0;scottcha@eos27:~/SPU241/Lab7[scottcha@eos27 Lab7]$ chmod go-r *.c
chmod: cannot access '*.c': No such file or directory
]0;scottcha@eos27:~/SPU241/Lab7[scottcha@eos27 Lab7]$ chmod go-r [K[K[K[K[K[K[K[K[K[Kd code[K[K[K[K[K[K[Kls
code	       findfiles2.sh  inboth1.sh  lab7a  loop2	loop4  menu
findfiles1.sh  headers	      inboth2.sh  loop1  loop3	loop5
]0;scottcha@eos27:~/SPU241/Lab7[scottcha@eos27 Lab7]$ cd code
]0;scottcha@eos27:~/SPU241/Lab7/code[scottcha@eos27 code]$ ls
firstC.c  firstC.dat  firstC.out  hello.c  hello.dat  test.c
]0;scottcha@eos27:~/SPU241/Lab7/code[scottcha@eos27 code]$ chmod go-r *.xc[K[Kc
]0;scottcha@eos27:~/SPU241/Lab7/code[scottcha@eos27 code]$ ls
firstC.c  firstC.dat  firstC.out  hello.c  hello.dat  test.c
]0;scottcha@eos27:~/SPU241/Lab7/code[scottcha@eos27 code]$ cd ..
]0;scottcha@eos27:~/SPU241/Lab7[scottcha@eos27 Lab7]$ ls
code	       findfiles2.sh  inboth1.sh  lab7a  loop2	loop4  menu
findfiles1.sh  headers	      inboth2.sh  loop1  loop3	loop5
]0;scottcha@eos27:~/SPU241/Lab7[scottcha@eos27 Lab7]$ mv inboth? code
mv: cannot stat 'inboth?': No such file or directory
]0;scottcha@eos27:~/SPU241/Lab7[scottcha@eos27 Lab7]$ mv inboth?.sh code
]0;scottcha@eos27:~/SPU241/Lab7[scottcha@eos27 Lab7]$ ls
code	       findfiles2.sh  lab7a  loop2  loop4  menu
findfiles1.sh  headers	      loop1  loop3  loop5
]0;scottcha@eos27:~/SPU241/Lab7[scottcha@eos27 Lab7]$ cd code
]0;scottcha@eos27:~/SPU241/Lab7/code[scottcha@eos27 code]$ ls
firstC.c    firstC.out	hello.dat   inboth2.sh
firstC.dat  hello.c	inboth1.sh  test.c
]0;scottcha@eos27:~/SPU241/Lab7/code[scottcha@eos27 code]$ cd ..
]0;scottcha@eos27:~/SPU241/Lab7[scottcha@eos27 Lab7]$ rm hello.dat|rm[K[Krm firstc[KC.dat
rm: rm: cannot remove 'hello.dat'cannot remove 'firstC.dat': No such file or directory: No such file or directory

]0;scottcha@eos27:~/SPU241/Lab7[scottcha@eos27 Lab7]$ rm *.dat
rm: cannot remove '*.dat': No such file or directory
]0;scottcha@eos27:~/SPU241/Lab7[scottcha@eos27 Lab7]$ ls
code	       findfiles2.sh  lab7a  loop2  loop4  menu
findfiles1.sh  headers	      loop1  loop3  loop5
]0;scottcha@eos27:~/SPU241/Lab7[scottcha@eos27 Lab7]$ cd code
]0;scottcha@eos27:~/SPU241/Lab7/code[scottcha@eos27 code]$ ls
firstC.c    firstC.out	hello.dat   inboth2.sh
firstC.dat  hello.c	inboth1.sh  test.c
]0;scottcha@eos27:~/SPU241/Lab7/code[scottcha@eos27 code]$ rm *.dat
]0;scottcha@eos27:~/SPU241/Lab7/code[scottcha@eos27 code]$ ls
firstC.c  firstC.out  hello.c  inboth1.sh  inboth2.sh  test.c
]0;scottcha@eos27:~/SPU241/Lab7/code[scottcha@eos27 code]$ exit
exit

Script done on 2019-03-15 13:26:21-04:00 [COMMAND_EXIT_CODE="0"]
Script started on 2019-03-15 13:28:49-04:00 [TERM="xterm" TTY="/dev/pts/0" COLUMNS="80" LINES="24"]
]0;scottcha@eos27:~/SPU241/Lab7[scottcha@eos27 Lab7]$ class="CIS241 WI[K19"
]0;scottcha@eos27:~/SPU241/Lab7[scottcha@eos27 Lab7]$ echo"[K "My class is "$class
My class is CIS241 W19
]0;scottcha@eos27:~/SPU241/Lab7[scottcha@eos27 Lab7]$ grep --help
Usage: grep [OPTION]... PATTERN [FILE]...
Search for PATTERN in each FILE.
Example: grep -i 'hello world' menu.h main.c

Pattern selection and interpretation:
  -E, --extended-regexp     PATTERN is an extended regular expression
  -F, --fixed-strings       PATTERN is a set of newline-separated strings
  -G, --basic-regexp        PATTERN is a basic regular expression (default)
  -P, --perl-regexp         PATTERN is a Perl regular expression
  -e, --regexp=PATTERN      use PATTERN for matching
  -f, --file=FILE           obtain PATTERN from FILE
  -i, --ignore-case         ignore case distinctions
  -w, --word-regexp         force PATTERN to match only whole words
  -x, --line-regexp         force PATTERN to match only whole lines
  -z, --null-data           a data line ends in 0 byte, not newline

Miscellaneous:
  -s, --no-messages         suppress error messages
  -v, --invert-match        select non-matching lines
  -V, --version             display version information and exit
      --help                display this help text and exit

Output control:
  -m, --max-count=NUM       stop after NUM selected lines
  -b, --byte-offset         print the byte offset with output lines
  -n, --line-number         print line number with output lines
      --line-buffered       flush output on every line
  -H, --with-filename       print file name with output lines
  -h, --no-filename         suppress the file name prefix on output
      --label=LABEL         use LABEL as the standard input file name prefix
  -o, --only-matching       show only the part of a line matching PATTERN
  -q, --quiet, --silent     suppress all normal output
      --binary-files=TYPE   assume that binary files are TYPE;
                            TYPE is 'binary', 'text', or 'without-match'
  -a, --text                equivalent to --binary-files=text
  -I                        equivalent to --binary-files=without-match
  -d, --directories=ACTION  how to handle directories;
                            ACTION is 'read', 'recurse', or 'skip'
  -D, --devices=ACTION      how to handle devices, FIFOs and sockets;
                            ACTION is 'read' or 'skip'
  -r, --recursive           like --directories=recurse
  -R, --dereference-recursive  likewise, but follow all symlinks
      --include=FILE_PATTERN  search only files that match FILE_PATTERN
      --exclude=FILE_PATTERN  skip files and directories matching FILE_PATTERN
      --exclude-from=FILE   skip files matching any file pattern from FILE
      --exclude-dir=PATTERN  directories that match PATTERN will be skipped.
  -L, --files-without-match  print only names of FILEs with no selected lines
  -l, --files-with-matches  print only names of FILEs with selected lines
  -c, --count               print only a count of selected lines per FILE
  -T, --initial-tab         make tabs line up (if needed)
  -Z, --null                print 0 byte after FILE name

Context control:
  -B, --before-context=NUM  print NUM lines of leading context
  -A, --after-context=NUM   print NUM lines of trailing context
  -C, --context=NUM         print NUM lines of output context
  -NUM                      same as --context=NUM
      --color[=WHEN],
      --colour[=WHEN]       use markers to highlight the matching strings;
                            WHEN is 'always', 'never', or 'auto'
  -U, --binary              do not strip CR characters at EOL (MSDOS/Windows)

When FILE is '-', read standard input.  With no FILE, read '.' if
recursive, '-' otherwise.  With fewer than two FILEs, assume -h.
Exit status is 0 if any line is selected, 1 otherwise;
if any error occurs and -q is not given, the exit status is 2.

Report bugs to: bug-grep@gnu.org
GNU grep home page: <http://www.gnu.org/software/grep/>
General help using GNU software: <http://www.gnu.org/gethelp/>
]0;scottcha@eos27:~/SPU241/Lab7[scottcha@eos27 Lab7]$ ls
code	       findfiles2.sh  lab7a  loop1  loop3  loop5
findfiles1.sh  headers	      lab7b  loop2  loop4  menu
]0;scottcha@eos27:~/SPU241/Lab7[scottcha@eos27 Lab7]$ grep -h "if test" f*[12]*
if test $# -eq 0
if test $# -eq 2
if test $# -eq 0
if test $# -eq 2
]0;scottcha@eos27:~/SPU241/Lab7[scottcha@eos27 Lab7]$ grep -h "if test" f*[12}[K]* | sort
if test $# -eq 0
if test $# -eq 0
if test $# -eq 2
if test $# -eq 2
]0;scottcha@eos27:~/SPU241/Lab7[scottcha@eos27 Lab7]$ grep -h "if test" f*[12]* | sort | uniq
if test $# -eq 0
if test $# -eq 2
]0;scottcha@eos27:~/SPU241/Lab7[scottcha@eos27 Lab7]$ exit
exit

Script done on 2019-03-15 13:36:50-04:00 [COMMAND_EXIT_CODE="0"]
